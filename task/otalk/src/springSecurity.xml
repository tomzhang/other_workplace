<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:sec="http://www.springframework.org/schema/security" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  
        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd  
        http://www.springframework.org/schema/security  
        http://www.springframework.org/schema/security/spring-security-3.2.xsd">

	<!-- 添加springSecurity配置 -->

	<!-- pattern添加访问url都会被拦截 access指的是访问权限的列名，其中/**代表拦截所有 -->
	<sec:http auto-config="true">
		<sec:intercept-url pattern="/user/admin/**" access="ROLE_ADMIN" />
		<!-- 添加自定义拦截页面 -->
		<sec:form-login login-page="/sangzi2015"
			default-target-url="/user/admin/userAdmin/login" />
	</sec:http>


	<!-- 添加访问权限的列表 -->
	<sec:authentication-manager>
		<sec:authentication-provider>
			<!-- 直接在xml配置 <sec:user-service> <sec:user name="admin" password="admin1" 
				authorities="ROLE_ADMIN"/> <sec:user name="pj" password="pj" authorities="ROLE_USER"/> 
				</sec:user-service> -->
			<!-- 这个是使用数据库查询方式,ref是指引用的数据库，user是指查询账户的sql,author是指查询的角色，role是数据库角色查询后的前缀 
				用户名的别名必须是username，密码列的别名必须是password，帐号有效状态的别名必须是enabled，而权限角色列的别名必须是role,因为前缀已经弄好了， 
				所以只需要存取ROLE_ADMIN后面的ADMIN -->
			<sec:jdbc-user-service data-source-ref="dataSource"
				users-by-username-query="select  username,password,enabled from admin where username=?"
				authorities-by-username-query="select  username,role from admin where username=?"
				role-prefix="ROLE_" />
		</sec:authentication-provider>
	</sec:authentication-manager>
</beans>