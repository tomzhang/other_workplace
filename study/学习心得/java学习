Thread 中interrupt表示

1.jps [options] [hostid]

    如果不指定hostid就默认为当前主机或服务器。

    命令行参数选项说明如下：

-q 不输出类名、Jar名和传入main方法的参数
-m 输出传入main方法的参数
-l 输出main类或Jar的全限名
-v 输出传入JVM的参数
-v 输出传入JVM的参数




2.jstack主要用来查看某个Java进程内的线程堆栈信息。语法格式如下：

jstack [option] pid
jstack [option] executable core
jstack [option] [server-id@]remote-hostname-or-ip

    命令行参数选项说明如下：

-l long listings，会打印出额外的锁信息，在发生死锁时可以用jstack -l pid来观察锁持有情况
-m mixed mode，不仅会输出Java堆栈信息，还会输出C/C++堆栈信息（比如Native方法）

    jstack可以定位到线程堆栈，根据堆栈信息我们可以定位到具体代码，所以它在JVM性能调优中使用得非常多。下面我们来一个实例找出某个Java进程中最耗费CPU的Java线程并定位堆栈信息，用到的命令有ps、top、printf、jstack、grep。 

-l long listings，会打印出额外的锁信息，在发生死锁时可以用jstack -l pid来观察锁持有情况

3.、 jmap（Memory Map）和jhat（Java Heap Analysis Tool）

    jmap用来查看堆内存使用状况，一般结合jhat使用。

    jmap语法格式如下：

jmap [option] pid
jmap [option] executable core
jmap [option] [server-id@]remote-hostname-or-ip

    如果运行在64位JVM上，可能需要指定-J-d64命令选项参数。

jmap -permstat pid




4.jstat（JVM统计监测工具）

    语法格式如下：

jstat [ generalOption | outputOptions vmid [interval[s|ms] [count]] ]

    vmid是Java虚拟机ID，在Linux/Unix系统上一般就是进程ID。interval是采样时间间隔。count是采样数目。比如下面输出的是GC信息，采样时间间隔为250ms，采样数为4： 





5.forkjoinpool

 

ForkJoinPool 是 Java SE 7 新功能“分叉/结合框架”的核心类，现在可能乏人问津，但我觉得它迟早会成为主流。分叉/结合框架是一个比较特殊的线程池框架，专用于需要将一个任务不断分解成子任务（分叉），再不断进行汇总得到最终结果（结合）的计算过程。比起传统的线程池类ThreadPoolExecutor，ForkJoinPool 实现了工作窃取算法，使得空闲线程能够主动分担从别的线程分解出来的子任务，从而让所有的线程都尽可能处于饱满的工作状态，提高执行效率。

ForkJoinPool 提供了三类方法来调度子任务：
execute 系列
    异步执行指定的任务。
invoke 和 invokeAll
    执行指定的任务，等待完成，返回结果。
submit 系列
    异步执行指定的任务并立即返回一个 Future 对象。

子任务由 ForkJoinTask 的实例来代表。它是一个抽象类，JDK 为我们提供了两个实现：RecursiveTask 和 RecursiveAction，分别用于需要和不需要返回计算结果的子任务。ForkJoinTask 提供了三个静态的 invokeAll 方法来调度子任务，注意只能在 ForkJoinPool 执行计算的过程中调用它们。

ForkJoinPool 和 ForkJoinTask 还提供了很多让人眼花缭乱的公共方法，其实它们大多数都是其内部实现去调用的，对于应用开发人员来说意义不大。

下面以统计 D 盘文件个数为例。这实际上是对一个文件树的遍历，我们需要递归地统计每个目录下的文件数量，最后汇总，非常适合用分叉/结合框架来处理：



6. java运行 jar | java -X 命令查看JVM的配置说明

-cp 参数后面是类路径，是指定给解释器到哪里找到你的.class文件，

window上分号“;” 
 
分隔，linux上是分号“:”分隔

写法：
java -cp .;myClass.jar packname.mainclassname  
classpath中的jar文件能使用通配符，如果是多个jar文件，要一个一个地罗列出来，从某种意义上说jar文件也就是路径。
其中.代表当前classespath的加载路径 也就相当于 classes的目录 

要指定各个JAR文件具体的存放路径，相同路径有多个可使用通配符
java -cp .;c:\classes\myClass.jar;d:\classes\*.jar packname.mainclassname 

 例如: 在 classess 目录下执行 java -cp .:../lib/* org.dream.quota.tcp.ThreadPoolExecutorTest 第一个是加载依赖包
       windows上的target 下的clasees目录下执行 java -cp .;org.finace.utils.test.Test//注意 -cp和 .;中间无空格 .;和后面输入的 包路径有空格 


java 中计算用到的 BigDecimal 

        1、  另一方面，String 构造方法是完全可预知的：写入 newBigDecimal("0.1") 将创建一个 BigDecimal，它正好等于预期的 0.1。因此，比较而言，通常建议优先使用String构造方法。

        2、当double必须用作BigDecimal的源时，请注意，此构造方法提供了一个准确转换；它不提供与以下操作相同的结果：先使用Double.toString(double)方法，然后使用BigDecimal(String)构造方法，将double转换为String。要获取该结果，请使用static valueOf(double)方法 
        3.BigDecimal.setScale()方法用于格式化小数点
		setScale(1)表示保留一位小数，默认用四舍五入方式
		setScale(1,BigDecimal.ROUND_DOWN)直接删除多余的小数位，如2.35会变成2.3
		setScale(1,BigDecimal.ROUND_UP)进位处理，2.35变成2.4
		setScale(1,BigDecimal.ROUND_HALF_UP)四舍五入，2.35变成2.4
		setScaler(1,BigDecimal.ROUND_HALF_DOWN)四舍五入，2.35变成2.3，如果是5则向下舍


  divi 中遇到 精度 问题  使用MathContext

	static MathContext 	MathContext.DECIMAL128
	  一个 MathContext 对象，其精度设置与 IEEE 754R Decimal128 格式（即 34 个数字）匹配，舍入模式为 HALF_EVEN，这是 IEEE 754R 的默认舍入模式。
	static MathContext 	MathContext.DECIMAL32
	  一个 MathContext 对象，其精度设置与 IEEE 754R Decimal32 格式（即 7 个数字）匹配，舍入模式为 HALF_EVEN，这是 IEEE 754R 的默认舍入模式。
	static MathContext 	MathContext.DECIMAL64
	  一个 MathContext 对象，其精度设置与 IEEE 754R Decimal64 格式（即 16 个数字）匹配，舍入模式为 HALF_EVEN，这是 IEEE 754R 的默认舍入模式。
	static MathContext 	MathContext.UNLIMITED
	  其设置具有无限精度算法所需值的 MathContext 对象。

	  
	  位运算符主要针对二进制，它包括了：“与”、“非”、“或”、“异或”。从表面上看似乎有点像逻辑运算符，但逻辑运算符是针对两个关系运算符来进行逻辑运算，而位运算符主要针对两个二进制数的位进行逻辑运算。下面详细介绍每个位运算符。

 


1．与运算符
与运算符用符号“&”表示，其使用规律如下：
两个操作数中位都为1，结果才为1，否则结果为0，例如下面的程序段。
public class data13
{
public static void main(String[] args)
{
int a=129;
int b=128;
System.out.println("a 和b 与的结果是："+(a&b));
}
}
运行结果
a 和b 与的结果是：128
下面分析这个程序：
“a”的值是129，转换成二进制就是10000001，而“b”的值是128，转换成二进制就是10000000。根据与运算符的运算规律，只有两个位都是1，结果才是1，可以知道结果就是10000000，即128。

 


2．或运算符
或运算符用符号“|”表示，其运算规律如下：
两个位只要有一个为1，那么结果就是1，否则就为0，下面看一个简单的例子。
public class data14
{
public static void main(String[] args)
{
int a=129;
int b=128;
System.out.println("a 和b 或的结果是："+(a|b));
}
}
运行结果
a 和b 或的结果是：129
下面分析这个程序段：
a 的值是129，转换成二进制就是10000001，而b 的值是128，转换成二进制就是10000000，根据或运算符的运算规律，只有两个位有一个是1，结果才是1，可以知道结果就是10000001，即129。

 


3．非运算符
非运算符用符号“~”表示，其运算规律如下：

如果位为0，结果是1，如果位为1，结果是0，下面看一个简单例子。
public class data15
{
public static void main(String[] args)
{
int a=2;
System.out.println("a 非的结果是："+(~a));
}
}

 


4．异或运算符
异或运算符是用符号“^”表示的，其运算规律是：
两个操作数的位中，相同则结果为0，不同则结果为1。下面看一个简单的例子。
public class data16
{
public static void main(String[] args)
{
int a=15;
int b=2;
System.out.println("a 与 b 异或的结果是："+(a^b));
}
}
运行结果
a 与 b 异或的结果是：13
分析上面的程序段：a 的值是15，转换成二进制为1111，而b 的值是2，转换成二进制为0010，根据异或的运算规律，可以得出其结果为1101 即13。


  二进制的与或异或  都是针对1 变化的 与 & 表示 两个都是1才是1 其余都是0 或 || 表示 两个只要有一个为1 就是 1  异或 ^表示两个相同为0 两个不同 为1
      左移动 数字 左手边 偏移，及右边补充0  <<  右边移动 则是 左边补充0  >>    没用符号的移动 则是>>>不分正负右边移动


java中线程异常处理
   ExecutorsService 可以使用 submit获得的futrue 中get获得 Exception
   
    Thread 中的异常 可以使用静态方法 setUnca...是为所有的线程设置异常，
	 每个线程的setUn...是为每个单独的线程设置异常，另外 executor中可以使用 Thread的静态方法，收到executor.ex的方法的异常

	  



Pattern与Match		Pattern pattern = Pattern.compile("\\d+");

		Matcher matcher = pattern.matcher("11111ddd22222");
		matcher.find();

		System.out.println(matcher.group());
		

        matcher.matchers()是完全匹配

5 HtmlEmail 发送依赖  commons-email 最好添加 mail 和activation 加进入		
		
6  @DateTimeFormat(pattern = "yyyy-MM/dd") 解决前台传字符串，后台是时间格式的问题		
		
		
7 java内省的使用  

   案例		BeanVlaue是一个Javabean 里面有一个字段aa，现在不知道字段aa是什么类型的可能是浮点、整形、长整形、字符串等，现在我要把String val=“1”，放进字段aa里面，val确定是字符型，请问怎么放？
   
   
   
    eg:       IllegalAccessException, InvocationTargetException {
        // Introspector类能对JavaBean的属性、方法等做处理
        BeanInfo bi = Introspector.getBeanInfo(user.getClass()); // 在 JavaBean上进行内省，了解其所有属性、公开的方法和事件,得到BeanInfo对象
        PropertyDescriptor[] pd = bi.getPropertyDescriptors(); // 属性描述
        for (PropertyDescriptor p : pd) {
            String attrName = p.getName(); // 获得此特性的名称,也就是UserBean的属性名称
            if (attrName.equals("aa")) {
                Method writeMethod = p.getWriteMethod();// 获得应该用于写入属性值的方法, 也就是得到set方法
                Class clazz[] = writeMethod.getParameterTypes(); // 按照声明顺序返回 Class对象的数组，这些对象描述了此 Method对象所表示的方法的形参类型，如不带参数，则返回长度为 0这些对象描述了此 Method 对象所表示的方法的形参类型。如果底层方法不带参数，则返回长度为 0 的数组
                for(Class _clazz : clazz){
                    if (_clazz == String.class){
                        writeMethod.invoke(user, "1");
                    }else if(_clazz == int.class){
                        writeMethod.invoke(user, 1);
                    }else if(_clazz == float.class){
                        writeMethod.invoke(user, 1.0);
                    }else if(_clazz == long.class){
                        writeMethod.invoke(user, 1);
                    }
                }
                Method readMethod = p.getReadMethod();// 获得应该用于读取属性值的方法，也就是 获取get方法
                Object obj = readMethod.invoke(user);// 执行get方法
                System.out.println(obj);
            }
        }
		
		
		
8 java class的使用

	1）Class.forName("");的作用是要求JVM查找并加载指定的类（java里面任何class都要装载在虚拟机上才能运行），如果在类中有静态初始化器的话，JVM必然会执行该类的静态代码段。在加载完成后，一般还要调用Class下的newInstance( )静态方法来实例化对象以便操作。构造函数是在当类被实例化的时候才会执行。Class.forName("")返回的是类
	2）首先，newInstance( )是一个方法，而new是一个关键字，其次，Class下的newInstance()的使用有局限，因为它生成对象只能调用无参的构造函数，而使用new关键字生成对象没有这个限制。 Class.forName("").newInstance()返回的是object		

9 mysql的存储过程
	CREATE PROCEDURE p3( t int)//小括号为参数的类型
	BEGIN
	IF t =2 THEN                //判断语句 不是 java中的==
	SELECT * FROM tunnel_info;
	ELSE 
	SELECT * FROM project;
	END IF;              //end if;结束
	END


	
删除 drop PROCEDURE p1;   //不需要括号

调用 calll p3(4) //传参数
show PROCEDURE STATUS;//查询所有存储过程


存储过程 深层次的挖掘
	另外有种变量叫做会话变量(session variable)，也叫做用户定义的变量(user defined variable)。这种变量要在变量名称前面加上“@”符号，叫做会话变量，
	代表整个会话过程他都是有作用的，这个有点类似于全局变量一样。
	这种变量用途比较广，因为只要在一个会话内(就是某个应用的一个连接过程中)，这个变量可以在被调用的存储过程或者代码之间共享数据。
	         用户变量的形式为@var_name
1)  如果仅仅想把数据传给MySQL存储过程，那就用in类型参数；  
2)  如果仅仅从MySQL存储过程返回值，那就用out类型参数；  
3)  如果需要把数据传给MySQL存储过程经过计算再传回给我们，那就用inout类型参数。  

out 用法
	CREATE PROCEDURE p10(out t int)
	BEGIN
	set t=4;
	IF t =2 THEN
	SELECT * FROM tunnel_info;
	ELSE 
	SELECT * FROM project;
	END IF;
	END

		set @t=6;
		call p10(@t);

10 mysql的百万级别数据优化 
    SELECT * FROM table WHERE id BETWEEN 1000000 AND 1000010;  分页
	另外，如果需要查询 id 不是连续的一段，最佳的方法就是先找出 id ，然后用 in 查询 
      SELECT * FROM table WHERE id IN(10000, 100000, 1000000...); 


11 spring的 BeanDefinitionBuilder

//将applicationContext转换为ConfigurableApplicationContext  
ConfigurableApplicationContext configurableApplicationContext = (ConfigurableApplicationContext) applicationContext;  
  
// 获取bean工厂并转换为DefaultListableBeanFactory  
DefaultListableBeanFactory defaultListableBeanFactory = (DefaultListableBeanFactory) configurableApplicationContext  
        .getBeanFactory();  
  
// 通过BeanDefinitionBuilder创建bean定义  
BeanDefinitionBuilder beanDefinitionBuilder = BeanDefinitionBuilder  
        .genericBeanDefinition(UserService.class);  
// 设置属性userAcctDAO,此属性引用已经定义的bean:userAcctDAO  
beanDefinitionBuilder  
        .addPropertyReference("userAcctDAO", "UserAcctDAO");  
		
		addPropertyValue//自定义的属性
  
// 注册bean  
defaultListableBeanFactory.registerBeanDefinition("sdfds",  
        beanDefinitionBuilder.getRawBeanDefinition());  
 		 
		 
12 srping的DefaultListableBeanFactory fac
  fac.registerBeanDefinition()注册bean

13 spring 实现BeanFactoryAware接口，其中只有一个方法即setFactory(BeanFactory factory)。使用上与BeanNameAware接口无异，只不过BeanFactoryAware注入的是个工厂，BeanNameAware注入的是个Bean的名字。


14	ResourceBundle的用法
   
   
15   
    java反射的简单用法 已知一个公共类，不知其具体是什么，通过getMethod("getXX")获取get方法之后 invoke公共类，获取其里面 要已知的特定的值
MongodbTemplete ss = new MongodbTemplete();
        ss.setEe("ww");
        Method ee = MongodbTemplete.class.getMethod("getEe");
        Object ee1 = ee.invoke(ss);
        System.out.println(ee1);  
16 最常用读取properties文件的方法
InputStream in = getClass().getResourceAsStream("资源Name");这种方式要求properties文件和当前类在同一文件夹下面。如果在不同的包中，必须使用：
InputStream ins = this.getClass().getResourceAsStream("/cn/zhao/properties/testPropertiesPath2.properties");
Java中获取路径方法

17 spring获取配置文件 可以  

DataProperties extends PropertyPlaceholderConfigurer {
    private Properties properties;

    @Override
    protected Properties mergeProperties() throws IOException {
        properties = super.mergeProperties();
        return properties;
    }

    public String getProperty(String key) {
        return properties.getProperty(key);
    }
	
	在配置中使用
	
	    <bean id="dataProperties" class="org.finace.utils.prop.DataProperties">
        <property name="location" value="root.properties"></property>
    </bean>
就可以注入

18 java -javaagent:JavaAgent.jar Test
		

19 spring 
	IOC（控制反转）和DI（依赖注入）的关系：
	（1）IOC: 控制反转，把对象创建交给spring进行配置
	（2）DI: 依赖注入，向类里面的属性中设置值
	（3）关系：依赖注入不能单独存在，需要在ioc基础之上完成操作		
	
20 协变和逆变 以及 PECS :(producer-extends, consumer-super)
   
   首先 协变和逆变的概念  //简单来说 协变 只能小于等于自己 逆变 只能大于等于自己
   
   逆变与协变用来描述类型转换（type transformation）后的继承关系，其定义：如果 A 、 B 表示类型， f (⋅) 表示类型转换， ≤ 表示继承关系（比如， A ≤ B 表示 A 是由 B 派生出来的子类）；
	f (⋅) 是逆变（contravariant）的，当 A ≤ B 时有 f ( B )≤ f ( A ) 成立；
	f (⋅) 是协变（covariant）的，当 A ≤ B 时有 f ( A )≤ f ( B ) 成 立 ；
	f (⋅) 是不变（invariant）的，当 A ≤ B 时上述两个式子均不成立，即 f ( A ) 与 f ( B ) 相互之间没有继承关系。
   
   1 方法的形参是协变的、方法的返回值时逆变的：
   eg:
	 static Number method(Number num) {
		return 1;
	}

	Object result = method(new Integer(2)); //correct
	Number result = method(new Object()); //error
	Integer result = method(new Integer(2)); //error
	
	2 泛型中协变跟逆变的使用 PECS
	 eg:
		<? extends> 实现了泛型的协变，：
		List<? extends Number> list1 = new ArrayList<Integer>();//协变 实例化 只能小于等于自己
		<? super> 实现了泛型的逆变，比如：
		List<? super Number> list2 = new ArrayList<Object>(); //逆变 实例化 只能大于等于自己
	 
     注意此时 ：当使用extends有界类型时，所有以类型参数为形参的方法均不可用；当使用super有界类型时，所有以类型参数为返回值的方法均以Object替代返回值中的参数类型	
                    	  list1.add(xx)//err
						  list2.add(1)
	
   3 PECS
		如果要从集合中读取类型T的数据，并且不能写入，可以使用 ? extends 通配符；(Producer Extends)
		如果要从集合中写入类型T的数据，并且不需要读取，可以使用 ? super 通配符；(Consumer Super)--在读取时无法获知对象的具体类型
		如果既要存又要取，那么就不要使用任何通配符。
	eg:
		java.util.Collections的copy方法(JDK1.7)完美地诠释了PECS：

	public static <T> void copy(List<? super T> dest, List<? extends T> src) {
		int srcSize = src.size();
		if (srcSize > dest.size())
			throw new IndexOutOfBoundsException("Source does not fit in dest");

		if (srcSize < COPY_THRESHOLD ||
			(src instanceof RandomAccess && dest instanceof RandomAccess)) {
			for (int i=0; i<srcSize; i++)
				dest.set(i, src.get(i));
		} else {
			ListIterator<? super T> di=dest.listIterator();
			ListIterator<? extends T> si=src.listIterator();
			for (int i=0; i<srcSize; i++) {
				di.next();
				di.set(si.next());
			}
		}
	}
			
21 	javap		
	javap -c Person显示Person.class反汇编出的字节码命令。 -verbose  列出详细信息 更多查看-help
	
	static使用的一个单利隐患
	  
	eg：javap分析案例
	
	   0:      aload_1
	   1:      bipush    10
	   3:      putfield   #6; //Field AnotherClass.a:I
	   6:      new #7; //class AnotherClass
	   9:      dup
	   10:    invokespecial #8; //Method AnotherClass."<init>":()V
	   13:    astore_1
	   14:    aload_1
	   15:    bipush    20
	   17:    putfield   #6; //Field AnotherClass.a:I
	   20:    return
 
	aload_1 把存放在局部变量表中索引1位置的对象引用压入操作栈
	bipush 10 把整数10压入栈
	putfield #2 把成员变量a的值设置成栈中的10，#2代表2号常量项
	new #3 创建AnotherClass的对象，把引用放入栈
	dup 复制刚放入的引用（这时存在着两个相同的引用）
	invokespecial #4 通过其中的一个引用调用AnotherClass的构造器，初始化对象，让另一个相同引用指向初始化的对象，然后前一个引用（this）弹出栈
	asstore_1 把引用保存到局部变量表中的索引1位置中，然后引用弹出栈
	aload_1 把局部变量表中索引1处的值压入操作栈。
	bipush 20 把整数20压入栈
	putfield #2 把成员变量a的值设置成栈中的10
	return 执行完毕退出	
	
22 	java编译java和javac反编译
	javac Test.java
	 后 运行 java Test
	 
23 URLCLassLoader加载指定的类
	  URLClassLoader urlClassLoader = new URLClassLoader(new URL[]{
						new URL("file:C:\\workplace\\dubbo\\public_basic\\public_facade_user\\target\\classes")
				});

				Class<?> aClass = urlClassLoader.loadClass("org.nessary.project.facade.user.entity.Merchandise");	
				
	ClassLoader只能读位于classpath下的文件（即：resources/testpro.properties必须放到src目录下，编译后进入bin目录）；

	而URLClassLoader可以读任意目录下的文件
24 schedultTime
ScheduleAtFixedRate 每次执行时间为上一次任务开始起向后推一个时间间隔，
即每次执行时间为 :initialDelay, initialDelay+period, initialDelay+2*period, …；ScheduleWithFixedDelay 每次执行时间为上一次任务结束起向后推一个时间间隔，
ScheduleWithFixedDelay 即每次执行时间为：initialDelay, initialDelay+executeTime+delay, initialDelay+2*executeTime+2*delay。由此可见，ScheduleAtFixedRate 是基于固定时间间隔进行任务调度，
ScheduleWithFixedDelay 取决于每次任务执行的时间长短，是基于不固定时间间隔进行任务调度。
	
25 mvn 下载 -DdownloadSources=true 下载源代码	
26 java 的学习

		jar命令格式：jar {c t x u f }[ v m e 0 M i ][-C 目录]文件名...
		 
		其中{ctxu}这四个参数必须选选其一。[v f m e 0 M i ]是可选参数，文件名也是必须的。
		 
		-c  创建一个jar包
		-t 显示jar中的内容列表
		-x 解压jar包
		-u 添加文件到jar包中
		-f 指定jar包的文件名
		-v  生成详细的报造，并输出至标准设备
		-m 指定manifest.mf文件.(manifest.mf文件中可以对jar包及其中的内容作一些一设置)
		-0 产生jar包时不对其中的内容进行压缩处理
		-M 不产生所有文件的清单文件(Manifest.mf)。这个参数与忽略掉-m参数的设置
		-i    为指定的jar文件创建索引文件
		-C 表示转到相应的目录下执行jar命令,相当于cd到那个目录，然后不带-C执行jar命令
		
		
	学习 
	
27 mysql_generate 生成 命令java -jar mybatis-generator-core-1.3.2.jar -configfile generator.xml -overwrite	

28 解析说明  jmap -histo
   需要说明的是数组类型的getName返回值，它使用前缀[表示数组，有几个[表示是几维数组，数组的类型用一个字符表示，I表示int，L表示类或接口，
   其他类型与字符的对应关系为: boolean(Z), byte(B), char(C), double(D), float(F), long(J), short(S)，对于引用类型的数组，注意最后有一个分号";"。

29 rxjava 学习 
	Observable
	.map                    // 操作1
	.flatMap                // 操作2
	.subscribeOn(io)
	.map                    //操作3
	.flatMap                //操作4
	.observeOn(main)
	.map                    //操作5
	.flatMap                //操作6
	.subscribeOn(io)        //!!特别注意
	.subscribe(handleData)   
	说明: 
		操作1，操作2是在io线程上，因为之后subscribeOn切换了线程
		操作3，操作4也是在io线程上，因为在subscribeOn切换了线程之后，并没有发生改变。
		操作5，操作6是在main线程上，因为在他们之前的observeOn切换了线程。
		特别注意那一段，对于操作5和操作6是无效的
  
    总结:
		subscribeOn的调用切换之前的线程。
		observeOn的调用切换之后的线程。
		observeOn之后，不可再调用subscribeOn 切换线程		
		只有第一subscribeOn() 起作用（所以多个 subscribeOn() 毛意义）
		这个 subscribeOn() 控制从流程开始的第一个操作，直到遇到第一个 observeOn()
		observeOn() 可以使用多次，每个 observeOn() 将导致一次线程切换()，这次切换开始于这次 observeOn() 的下一个操作
		不论是 subscribeOn() 还是 observeOn()，每次线程切换如果不受到下一个 observeOn() 的干预，线程将不再改变，不会自动切换到其他线程		
		
		
30 	TP99,TP95 
     TP99就是满足百分之九十九的网络请求所需要的最低耗时。同理TP999就是满足千分之九百九十九的网络请求所需要的最低耗时。
	 
     eg 
     [ 10ms,  1s, 200ms, 100ms]，我们把其从小到大排个序：[10ms, 100ms, 200ms, 1s]，
	 
     于是我们知道，TP50，就是50%的请求ceil(4*0.5)=2时间是小于100ms的，TP90就是90%的请求ceil(4*0.9)=4时间小于1s。于是：TP50就是100ms，TP90就是1s
	 
31 jetty远程设置 jetty.sh找到if [ -z "$JAVA" ] 再上面设置 JAVA='/opt/java/bin/java'	  --后可以使用jetty.sh run 查看是否设置正确

32 ThreadLocal 使用防止内存泄漏
	每次使用完ThreadLocal，都调用它的remove()方法，清除数据。
	在使用线程池的情况下，没有及时清理ThreadLocal，不仅是内存泄漏的问题，更严重的是可能导致业务逻辑出现问题。所以，使用ThreadLocal就跟加锁完要解锁一样，用完就清理。
	
	
33 gradle 使用 第三方jar 
 //导入本地的依赖包
   compile fileTree(dir: 'libs', include: ['*.jar'])	
   
34 java生成doc 命令 
	javadoc -d 生成的目录 包名  -windowtitle html的标题  -encoding UTF-8 -charset UTF-8   3.常见的javadoc标记
		@version 指定版本信息
		@since 指定最早出现在那个版本
		@author 指定作者
		@see 生成参考其它javaDoc文档的链接
		@link 生成参考其它javadoc文档的链接，它和@see标记的区别在于@link标记能够嵌入到注释语句中，为注释语句中的特定词汇生成链接。
		@deprecated 用来标明被注释的类，变量或方法已经不提倡使用，在将来的版本中可能被废弃。
		@param 描述方法的参数
		@return 描述方法的返回值
		@throws 描述方法抛出的异常，指明抛出异常的条件
		4.javadoc命令既可以处理包，也可以处理java源文件.
		javadoc [option] [packagenames] [sourcefiles]
		javadoc命令的主要选项:
		-public 仅为public访问级别的类及类的成员生成javaDoc文档
		-proteceted 仅为public和protected访问级别的类及类的成员生成javadoc文档. 
		(默认选项)
		-package 仅为public,protected和默认访问级别的类及类的成员生成
		javaDoc文档
		-private 为public,protected,默认和private访问级别的类及类的成员生成javadoc文档
		-version 解析@version标记
		-author 解析@author标记
		-splitindex 将索引分为每个字母对应一个索引文件
		-sourcepath <pathlist> 指定java源文件的路径
		-classpath <pathlist> 指定classpath
		-d <directory> 指定javaDoc文档的输出目录
		javadoc命令的几个选项的用法:
		-public,-protected,-package和-private这4个选项用于指定输出那些访问级别的类和成员的javaDoc文档.其中protected为默认选项。
		-version和-author选项指定在javaDoc文档中包含由@version和@author标记指示的内容。这两个选项不是默认选项。在默认情况下，javadoc命令会忽略注释中的@version和@author标记，因此生成的javaDoc文档中不包含版本和作者信息。
		
		
35 intellj idea 设置自定义模板 
    file-->setting-->live templates-->右边添加 group 和自定义的注解短写提示  
   模板
		   /**
		 * <p>
		 * <span>API说明：<a style="color:blue"></a></span>
		 * <br/>
		 * <span>请求方式：<a style="color:blue">POST</ a></span>
		 * <br/>
		 * <span>URL地址： < a href=""></a></span>
		 * <br/>
		 * </p >
		 *
		 *$params$
		 * @return <table>
		 * <thead>
		 * <tr>
		 * <th style="text-align:left">返回结果</th>
		 * <th style="text-align:left">状态标识</th>
		 * <th style="text-align:left">说明</th>
		 * </tr>
		 * </thead>
		 * <tbody>
		 * <tr>
		 * <td style="text-align:left">{"code":200,"msg":"",data;""}</td>
		 * <td style="text-align:left">200</td>
		 * <td style="text-align:left">成功</td>
		 * </tr>
		 * <tr>
		 * <td style="text-align:left">{"code":201,"msg":"",data;""}</td>
		 * <td style="text-align:left">200</td>
		 * <td style="text-align:left">参数不对</td>
		 * </tr>
		 * <tr>
		 * <td style="text-align:left">{"code":208,"msg":"",data;""}</td>
		 * <td style="text-align:left">200</td>
		 * <td style="text-align:left">请求失败</td>
		 * </tr>
		 * <tr>
		 * <td style="text-align:left">{"code":500,"msg":"",data;""}</td>
		 * <td style="text-align:left">200</td>
		 * <td style="text-align:left">服务器出错</td>
		 * </tr>
		 * </tbody>
		 * </table>
		 * <p>
		 * <span>举例说明</span>
		 * <p>
		 * </p >
		 */
   
   
   其中变量 $params$ 对应脚本
   groovyScript("def result=''; def params=\"${_1}\".replaceAll('[\\\\[|\\\\]|\\\\s]', '').split(',').toList(); for(i = 0; i < params.size(); i++) {result+='  @param ' + params[i] + ((i < params.size() - 1) ? '\\n\\b' : '')}; return result", methodParameters()) 
  
36 redis的lua学习
	eg1: 
		eval "return {KEYS[1],KEYS[2],ARGV[1],ARGV[2]}" 2 key1 key2 first second
		1) "key1"
		2) "key2"
		3) "first"
		4) "second"  
	
	eg2:
		eval "return redis.call('set','foo','bar')" 0
	eg3:
		eval "return redis.call('get','foo')" 0	
	eg4:

37 构造函数和类的构造 


            try {
                Constructor<IdUtil> constructor = IdUtil.class.getConstructor(String.class);
                constructor.setAccessible(true);
                constructor.newInstance("ssss");
            } catch (InstantiationException e) {
                e.printStackTrace();
            } catch (IllegalAccessException e) {
                e.printStackTrace();
            } catch (InvocationTargetException e) {
                e.printStackTrace();
            } catch (NoSuchMethodException e) {
                e.printStackTrace();
            }

//            try {
//                Class.forName(IdUtil.class.getCanonicalName()).newInstance();
//            } catch (InstantiationException e) {
//                e.printStackTrace();
//            } catch (IllegalAccessException e) {
//                e.printStackTrace();
//            }
            return;
        }	
		
38 gradle -Dskip.test build 过滤test		

39 keytools -list -keystore cacerts 显示仓库为cacerts的所有列表(显示别名什么的加 -rfc)
   keytool -delete -alias akazam_email -keystore cacerts  删除库为cacerts 别名为 akazam_email的密钥
   keytool -import -alias akazam_email -file akazam_email.cer -keystore cacerts -trustcacerts 向库为cacerts 导入别名为 akazam_email的密钥
   
40 java建立 出错  libraries: libjli.so: cannot open shared object file: No such file or directory
	rm -rf /usr/bin/javac 
	rm -rf /usr/bin/jar
	rm -rf /usr/bin/java
	然后建立软链 
	ln -s /usr/local/jdk1.6.0_13/bin/javac /usr/bin/javac 
	ln -s /usr/local/jdk1.6.0_13/bin/jar /usr/bin/jar

	ln -s /usr/local/jdk1.6.0_13/bin/javac /usr/bin/java   
	
41  CT Card Table 
   虚拟机使用一种叫做卡表（Card Table）的数据结构，卡表作为一个比特位的集合，每一个比特位可以用来表示年老代的某一区域中的所有对象是否持有新生代对象的引用	
   
   
42 JMH基准测试
   1下载jar mvn archetype:generate -DinteractiveMode=false -DarchetypeGroupId=org.openjdk.jmh  -DarchetypeArtifactId=jmh-java-benchmark-archetype  -DgroupId=org.sample   -DartifactId=test -Dversion=1.0   
   
   
43  spring boot 启动程序 
   利用 java -jar xx.jar 
   但是考虑到一些配置读取不了 或者 什么 也可以利用 java -cp .;xx.jar org.springframework.boot.loader.JarLauncher (这个是在 jar 的MAINFEST.MF文件的启动类中)
		两者的区别 
		1.打包时指定了主类，可以直接用java -jar xxx.jar。
		2.打包是没有指定主类，可以用java -cp xxx.jar 主类名称（绝对路径）
		
44  truncat 所有表
        select CONCAT('truncate TABLE ',table_schema,'.',TABLE_NAME, ';') from INFORMATION_SCHEMA.TABLES where  table_schema in ('dbname');		
		 